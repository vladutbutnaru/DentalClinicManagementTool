package ro.dcmt.data.controllers;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ro.dcmt.data.beans.Programare;
import ro.dcmt.data.connection.DBConnection;

public class ProgramariService implements DBEntityController {
	private static Logger logger = LoggerFactory.getLogger(ProgramariService.class);
	private static Connection conn = (Connection) DBConnection.getConnection();
	private static PreparedStatement stmt = null;
	private static ResultSet rs = null;

	public Object getById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	public ArrayList<Object> getAllByColumn(String column, String value) {
		// TODO Auto-generated method stub
		return null;
	}

	public void delete(int id) {
		// TODO Auto-generated method stub

	}

	public void update(int id) {
		// TODO Auto-generated method stub

	}

	public static int getCountofPacientsForDoctor(int id) {
		int number = 0;
		try {

			stmt = conn.prepareStatement("SELECT COUNT(*) AS total FROM programari WHERE IDDoctor = ?");
			stmt.setInt(1, id);

			rs = stmt.executeQuery();
			rs.next();
			number=rs.getInt("total");
		} catch (SQLException ex) {
			// handle any errors
			System.out.println("SQLException: " + ex.getMessage());
			System.out.println("SQLState: " + ex.getSQLState());
			System.out.println("VendorError: " + ex.getErrorCode());
			logger.error(ex.getMessage());
		}
		return number;

	}
	public static ArrayList<Programare> getNewAppointmentsForDoctor(int idDoctor){
		ArrayList<Programare> programari = new ArrayList<Programare>();
        try {

            stmt = conn.prepareStatement("SELECT * FROM programari WHERE IDDoctor = ? AND Aprobat = 0");
            stmt.setInt(1, idDoctor);

            rs = stmt.executeQuery();
            logger.info("getNewAppointmentsForDoctor: " + idDoctor);
           while(rs.next()) {
               Programare p = new Programare();
               p.setId(rs.getInt(1));
               p.setIdDoctor(rs.getInt(2));
               p.setIdUser(rs.getInt(3));
              // p.setData(rs.getDate(4));
               p.setIdOperatii(rs.getString(5));
               p.setAprobat(rs.getInt(6)==1);
               programari.add(p);
           }
        } catch (SQLException ex) {
            // handle any errors
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
            logger.error(ex.getMessage());
        }
        return programari;

	}
	
	public static ArrayList<Programare> getTotalAppointmentsThisMonth(int idDoctor){
		ArrayList<Programare> programari = new ArrayList<Programare>();
        try {
			Date date = new Date();
			Timestamp timestamp = new Timestamp(date.getTime());
			
            stmt = conn.prepareStatement("SELECT * FROM programari WHERE Data > ?");
            stmt.setTimestamp(1, timestamp);

            rs = stmt.executeQuery();
            logger.info("getNewAppointmentsForDoctor: " + idDoctor);
           while(rs.next()) {
               Programare p = new Programare();
               p.setId(rs.getInt(1));
               p.setIdDoctor(rs.getInt(2));
               p.setIdUser(rs.getInt(3));
              // p.setData(rs.getDate(4));
               p.setIdOperatii(rs.getString(5));
               p.setAprobat(rs.getInt(6)==1);
               programari.add(p);
           }
        } catch (SQLException ex) {
            // handle any errors
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
            logger.error(ex.getMessage());
        }
        return programari;

	}
}
